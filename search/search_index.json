{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Meilisearch Python Async Meilisearch Python Async is a Python async client for the Meilisearch API. The focus of this documentation is on the Meilisearch Python Async API. More information of Meilisearch itself and how to use it can be found in here . Compatibility with Meilisearch This package only guarantees the compatibility with version v0.28 of Meilisearch .","title":"Home"},{"location":"#meilisearch-python-async","text":"Meilisearch Python Async is a Python async client for the Meilisearch API. The focus of this documentation is on the Meilisearch Python Async API. More information of Meilisearch itself and how to use it can be found in here .","title":"Meilisearch Python Async"},{"location":"#compatibility-with-meilisearch","text":"This package only guarantees the compatibility with version v0.28 of Meilisearch .","title":"Compatibility with Meilisearch"},{"location":"api/","text":"Developer API Client Create a client with a context manager This client runs in a context manager which ensures that everything is cleaned up after the use of the client is done. To create a client: from milisearch - python - async import Client async with Client ( \"http://localhost:7700\" , \"masterKey\" ) as client : index = client . index ( \"movies\" ) ... Create a client without a context manager It is also possible to call the client without using a context manager, but in doing so you will need to make sure to do the cleanup yourself: from meilisearch - python - async import Client try : client = Client ( \"http://localhost:7700\" , \"masterKey\" ) ... finally : await client . aclose () class meilisearch_python_async. Client ( url , api_key=None , * , timeout=None ) The client to connect to the MeiliSearchApi. init ( self , url , api_key=None , * , timeout=None ) Class initializer. Args: url: The url to the MeiliSearch API (ex: http://localhost:7700) api_key: The optional API key for MeiliSearch. Defaults to None. timeout: The amount of time in seconds that the client will wait for a response before timing out. Defaults to None. aclose ( self ) Closes the client. This only needs to be used if the client was not created with a context manager. create_dump ( self ) Trigger the creation of a MeiliSearch dump. Returns: The details of the task. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> await client . create_dump () create_index ( self , uid , primary_key=None ) Creates a new index. Args: uid: The index's unique identifier. primary_key: The primary key of the documents. Defaults to None. Returns: An instance of Index containing the information of the newly created index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = await client . create_index ( \"movies\" ) delete_index_if_exists ( self , uid ) Deletes an index if it already exists. Args: uid: The index's unique identifier. Returns: True if an index was deleted for False if not. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> await client . delete_index_if_exists () generate_tenant_token ( self , search_rules , * , api_key , expires_at=None ) Generates a JWT token to use for searching. Args: search_rules: Contains restrictions to use for the token. The default rules used for the API key used for signing can be used by setting searchRules to [\" \"]. If \"indexes\" is included it must be equal to or more restrictive than the key used to generate the token. api_key: The API key to use to generate the token. expires_at: The timepoint at which the token should expire. If value is provided it shoud be a UTC time in the future. Default = None. Returns: A JWT token Raises: InvalidRestriction: If the restrictions are less strict than the permissions allowed in the API key. KeyNotFoundError: If no API search key is found. >>> from datetime import datetime , timedelta >>> from meilisearch_async_client import Client >>> >>> expires_at = datetime . utcnow () + timedelta ( days = 7 ) >>> >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> token = client . generate_tenant_token ( >>> search_rules = [ \" \" ], api_key = api_key , expires_at = expires_at >>> ) get_indexes ( self ) Get all indexes. Returns: A list of all indexes. Raises: * MeilisearchCommunicationError: If there was an error communicating with the server. * MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> indexes = await client . get_indexes () get_index ( self , uid ) Gets a single index based on the uid of the index. Args: uid: The index's unique identifier. Returns: An Index instance containing the information of the fetched index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = await client . get_index () index ( self , uid ) Create a local reference to an index identified by UID, without making an HTTP call. Because no network call is made this method is not awaitable. Args: uid: The index's unique identifier. Returns: An Index instance. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) get_all_stats ( self ) Get stats for all indexes. Returns: Information about database size and all indexes. https://docs.meilisearch.com/reference/api/stats.html Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> stats = await client . get_all_stats () get_or_create_index ( self , uid , primary_key=None ) Get an index, or create it if it doesn't exist. Args: uid: The index's unique identifier. primary_key: The primary key of the documents. Defaults to None. Returns: An instance of Index containing the information of the retrieved or newly created index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error.MeiliSearchTimeoutError: If the connection times out. MeiliSearchTimeoutError: If the connection times out. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = await client . get_or_create_index ( \"movies\" ) create_key ( self , key ) Creates a new API key. Args: key: The information to use in creating the key. Note that if an expires_at value is included it should be in UTC time. Returns: The new API key. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> from meilissearch_async_client.models.client import KeyCreate >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> key_info = KeyCreate ( >>> description = \"My new key\" , >>> actions = [ \"search\" ], >>> indexes = [ \"movies\" ], >>> ) >>> keys = await client . create_key ( key_info ) get_keys ( self ) Gets the MeiliSearch API keys. Returns: API keys. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> keys = await client . get_keys () get_key ( self , key ) Gets information about a specific API key. Args: key: The key for which to retrieve the information. Returns: The API key, or None if the key is not found. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> keys = await client . get_key ( \"abc123\" ) update_key ( self , key ) Update an API key. Args: key: The information to use in updating the key. Note that if an expires_at value is included it should be in UTC time. Returns: The updated API key. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> from meilissearch_async_client.models.client import KeyUpdate >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> key_info = KeyUpdate ( key = \"abc123\" , >>> indexes = [ \"*\" ], >>> ) >>> keys = await client . update_key ( key_info ) get_raw_index ( self , uid ) Gets the index and returns all the index information rather than an Index instance. Args: uid: The index's unique identifier. Returns: Index information rather than an Index instance. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = await client . get_raw_index ( \"movies\" ) get_raw_indexes ( self ) Gets all the indexes. Returns all the index information rather than an Index instance. Returns: A list of the Index information rather than an Index instances. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = await client . get_raw_indexes () get_version ( self ) Get the MeiliSearch version. Returns: Information about the version of MeiliSearch. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> version = await client . get_version () health ( self ) Get health of the MeiliSearch server. Returns: The status of the MeiliSearch server. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> health = await client . get_healths () Index class meilisearch_python_async.index. Index ( http_client , uid , primary_key=None , created_at=None , updated_at=None ) Index class gives access to all indexes routes and child routes. https://docs.meilisearch.com/reference/api/indexes.html init ( self , http_client , uid , primary_key=None , created_at=None , updated_at=None ) Class initializer. Args: http_client: An instance of the AsyncClient. This automatically gets passed by the Client when creating and Index instance. uid: The index's unique identifier. primary_key: The primary key of the documents. Defaults to None. created_at: The date and time the index was created. Defaults to None. updated_at: The date and time the index was last updated. Defaults to None. delete ( self ) Deletes the index. Returns: The details of the task. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. ** Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . delete () delete_if_exists ( self ) Delete the index if it already exists. Returns: True if the index was deleted or False if not. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . delete_if_exists () update ( self , primary_key ) Update the index primary key. Args: primary_key: The primary key of the documents. Returns: An instance of the Index with the updated information. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> updated_index = await index . update () fetch_info ( self ) Gets the infromation about the index. Returns: An instance of the Index containing the retrieved information. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> index_info = await index . fetch_info () get_primary_key ( self ) Get the primary key. Returns: The primary key for the documents in the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> primary_key = await index . get_primary_key () create ( http_client , uid , primary_key=None ) Creates a new index. In general this method should not be used directly and instead the index should be created through the Client . Args: http_client: An instance of the AsyncClient. This automatically gets passed by the Client when creating and Index instance. uid: The index's unique identifier. primary_key: The primary key of the documents. Defaults to None. Returns: An instance of Index containing the information of the newly created index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = await index . create ( client , \"movies\" ) get_stats ( self ) Get stats of the index. Returns: Stats of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> stats = await index . get_stats () search ( self , query=None , * , offset=0 , limit=20 , filter=None , facets=None , attributes_to_retrieve=['*'] , attributes_to_crop=None , crop_length=200 , attributes_to_highlight=None , sort=None , show_matches_position=False , highlight_pre_tag=' ' , highlight_post_tag=' ' , crop_marker='...' ) Search the index. Args: query: String containing the word(s) to search offset: Number of documents to skip. Defaults to 0. limit: Maximum number of documents returned. Defaults to 20. filter: Filter queries by an attribute value. Defaults to None. facets: Facets for which to retrieve the matching count. Defaults to None. attributes_to_retrieve: Attributes to display in the returned documents. Defaults to [\"*\"]. attributes_to_crop: Attributes whose values have to be cropped. Defaults to None. crop_length: The maximun number of words to display. Defaults to 200. attributes_to_highlight: Attributes whose values will contain highlighted matching terms. Defaults to None. sort: Attributes by which to sort the results. Defaults to None. show_matches_postions: Defines whether an object that contains information about the matches should be returned or not. Defaults to False. hightlight_pre_tag: The opening tag for highlighting text. Defaults to . hightlight_post_tag: The closing tag for highlighting text. Defaults to crop_marker: Marker to display when the number of words excedes the crop_length . Defaults to ... Returns: Results of the search Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> search_results = await index . search ( \"Tron\" ) get_document ( self , document_id ) Get one document with given document identifier. Args: document_id: Unique identifier of the document. Returns: The document information Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> document = await index . get_document ( \"1234\" ) get_documents ( self , * , offset=0 , limit=20 , fields=None ) Get a batch documents from the index. Args: offset: Number of documents to skip. Defaults to 0. limit: Maximum number of documents returnedd. Defaults to 20. fields: Document attributes to show. If this value is None then all attributes are retrieved. Defaults to None. Returns: Documents info. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> documents = await index . get_documents () add_documents ( self , documents , primary_key=None ) Add documents to the index. Args: documents: List of documents. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: The details of the task. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> >>> documents = [ >>> { \"id\" : 1 , \"title\" : \"Movie 1\" , \"genre\" : \"comedy\" }, >>> { \"id\" : 2 , \"title\" : \"Movie 2\" , \"genre\" : \"drama\" }, >>> ] >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . add_documents ( documents ) add_documents_in_batches ( self , documents , * , batch_size=1000 , primary_key=None ) Adds documents in batches to reduce RAM usage with indexing. Args: documents: List of documents. batch_size: The number of documents that should be included in each batch. Defaults to 1000. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: List of update ids to track the action. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> >>> documents = [ >>> { \"id\" : 1 , \"title\" : \"Movie 1\" , \"genre\" : \"comedy\" }, >>> { \"id\" : 2 , \"title\" : \"Movie 2\" , \"genre\" : \"drama\" }, >>> ] >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . add_documents_in_batches ( documents ) add_documents_from_directory ( self , directory_path , * , primary_key=None , document_type='json' , combine_documents=True ) Load all json files from a directory and add the documents to the index. Args: directory_path: Path to the directory that contains the json files. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. document_type: The type of document being added. Accepted types are json, csv, and ndjson. For csv files the first row of the document should be a header row contining the field names, and ever for should have a title. combine_documents: If set to True this will combine the documents from all the files before indexing them. Defaults to True. Returns: The details of the task status. Raises: InvalidDocumentError: If the docucment is not a valid format for MeiliSarch. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> directory_path = Path ( \"/path/to/directory/containing/files\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . add_documents_from_directory ( directory_path ) add_documents_from_directory_in_batches ( self , directory_path , * , batch_size=1000 , primary_key=None , document_type='json' , combine_documents=True ) Load all json files from a directory and add the documents to the index in batches. Args: directory_path: Path to the directory that contains the json files. batch_size: The number of documents that should be included in each batch. Defaults to 1000. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. document_type: The type of document being added. Accepted types are json, csv, and ndjson. For csv files the first row of the document should be a header row contining the field names, and ever for should have a title. combine_documents: If set to True this will combine the documents from all the files before indexing them. Defaults to True. Returns: List of update ids to track the action. Raises: InvalidDocumentError: If the docucment is not a valid format for MeiliSarch. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> directory_path = Path ( \"/path/to/directory/containing/files\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . add_documents_from_directory_in_batches ( directory_path ) add_documents_from_file ( self , file_path , primary_key=None ) Add documents to the index from a json file. Args: file_path: Path to the json file. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: The details of the task status. Raises: InvalidDocumentError: If the docucment is not a valid format for MeiliSarch. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> file_path = Path ( \"/path/to/file.json\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . add_documents_from_file ( file_path ) add_documents_from_file_in_batches ( self , file_path , * , batch_size=1000 , primary_key=None ) Adds documents form a json file in batches to reduce RAM usage with indexing. Args: file_path: Path to the json file. batch_size: The number of documents that should be included in each batch. Defaults to 1000. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: List of update ids to track the action. Raises: InvalidDocumentError: If the docucment is not a valid format for MeiliSarch. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> file_path = Path ( \"/path/to/file.json\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . add_documents_from_file_in_batches ( file_path ) add_documents_from_raw_file ( self , file_path , primary_key=None ) Directly send csv or ndjson files to MeiliSearch without pre-processing. The can reduce RAM usage from MeiliSearch during indexing, but does not include the option for batching. Args: file_path: The path to the file to send to MeiliSearch. Only csv and ndjson files are allowed. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: The details of the task. Raises: ValueError: If the file is not a csv or ndjson file. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> file_path = Path ( \"/path/to/file.csv\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . add_documents_from_raw_file ( file_path ) update_documents ( self , documents , primary_key=None ) Update documents in the index. Args: documents: List of documents. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: The details of the task. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> documents = [ >>> { \"id\" : 1 , \"title\" : \"Movie 1\" , \"genre\" : \"comedy\" }, >>> { \"id\" : 2 , \"title\" : \"Movie 2\" , \"genre\" : \"drama\" }, >>> ] >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_documents ( documents ) update_documents_in_batches ( self , documents , * , batch_size=1000 , primary_key=None ) Update documents in batches to reduce RAM usage with indexing. Each batch tries to fill the max_payload_size Args: documents: List of documents. batch_size: The number of documents that should be included in each batch. Defaults to 1000. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: List of update ids to track the action. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> documents = [ >>> { \"id\" : 1 , \"title\" : \"Movie 1\" , \"genre\" : \"comedy\" }, >>> { \"id\" : 2 , \"title\" : \"Movie 2\" , \"genre\" : \"drama\" }, >>> ] >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_documents_in_batches ( documents ) update_documents_from_directory ( self , directory_path , * , primary_key=None , document_type='json' , combine_documents=True ) Load all json files from a directory and update the documents. Args: directory_path: Path to the directory that contains the json files. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. document_type: The type of document being added. Accepted types are json, csv, and ndjson. For csv files the first row of the document should be a header row contining the field names, and ever for should have a title. combine_documents: If set to True this will combine the documents from all the files before indexing them. Defaults to True. Returns: The details of the task status. Raises: InvalidDocumentError: If the docucment is not a valid format for MeiliSarch. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> directory_path = Path ( \"/path/to/directory/containing/files\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_documents_from_directory ( directory_path ) update_documents_from_directory_in_batches ( self , directory_path , * , batch_size=1000 , primary_key=None , document_type='json' , combine_documents=True ) Load all json files from a directory and update the documents. Args: directory_path: Path to the directory that contains the json files. batch_size: The number of documents that should be included in each batch. Defaults to 1000. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. document_type: The type of document being added. Accepted types are json, csv, and ndjson. For csv files the first row of the document should be a header row contining the field names, and ever for should have a title. combine_documents: If set to True this will combine the documents from all the files before indexing them. Defaults to True. Returns: List of update ids to track the action. Raises: InvalidDocumentError: If the docucment is not a valid format for MeiliSarch. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> directory_path = Path ( \"/path/to/directory/containing/files\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_documents_from_directory_in_batches ( directory_path ) update_documents_from_file ( self , file_path , primary_key=None ) Add documents in the index from a json file. Args: file_path: Path to the json file. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> file_path = Path ( \"/path/to/file.json\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_documents_from_file ( file_path ) update_documents_from_file_in_batches ( self , file_path , * , batch_size=1000 , primary_key=None ) Updates documents form a json file in batches to reduce RAM usage with indexing. Args: file_path: Path to the json file. batch_size: The number of documents that should be included in each batch. Defaults to 1000. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: List of update ids to track the action. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> file_path = Path ( \"/path/to/file.json\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_documents_from_file_in_batches ( file_path ) update_documents_from_raw_file ( self , file_path , primary_key=None ) Directly send csv or ndjson files to MeiliSearch without pre-processing. The can reduce RAM usage from MeiliSearch during indexing, but does not include the option for batching. Args: file_path: The path to the file to send to MeiliSearch. Only csv and ndjson files are allowed. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: The details of the task status. Raises: ValueError: If the file is not a csv or ndjson file. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> file_path = Path ( \"/path/to/file.csv\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_documents_from_raw_file ( file_path ) delete_document ( self , document_id ) Delete one document from the index. Args: document_id: Unique identifier of the document. Returns: The details of the task status. Rases: MeiliSearchCommunicationError: If there was an error communicating with the server. MeiliSearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . delete_document ( \"1234\" ) delete_documents ( self , ids ) Delete multiple documents from the index. Args: ids: List of unique identifiers of documents. Returns: List of update ids to track the action. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . delete_documents ([ \"1234\" , \"5678\" ]) delete_all_documents ( self ) Delete all documents from the index. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . delete_all_document () get_settings ( self ) Get settings of the index. Returns: Settings of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> settings = await index . get_settings () update_settings ( self , body ) Update settings of the index. Args: body: Settings of the index. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> from meilisearch_async_client import MeiliSearchSettings >>> new_settings = MeiliSearchSettings ( >>> synonyms = { \"wolverine\" : [ \"xmen\" , \"logan\" ], \"logan\" : [ \"wolverine\" ]}, >>> stop_words = [ \"the\" , \"a\" , \"an\" ], >>> ranking_rules = [ >>> \"words\" , >>> \"typo\" , >>> \"proximity\" , >>> \"attribute\" , >>> \"sort\" , >>> \"exactness\" , >>> \"release_date:desc\" , >>> \"rank:desc\" , >>> ], >>> filterable_attributes = [ \"genre\" , \"director\" ], >>> distinct_attribute = \"url\" , >>> searchable_attributes = [ \"title\" , \"description\" , \"genre\" ], >>> displayed_attributes = [ \"title\" , \"description\" , \"genre\" , \"release_date\" ], >>> sortable_attributes = [ \"title\" , \"release_date\" ], >>> ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_settings ( new_settings ) reset_settings ( self ) Reset settings of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_settings () get_ranking_rules ( self ) Get ranking rules of the index. Returns: List containing the ranking rules of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> ranking_rules = await index . get_ranking_rules () update_ranking_rules ( self , ranking_rules ) Update ranking rules of the index. Args: ranking_rules: List containing the ranking rules. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> ranking_rules = [ >>> \"words\" , >>> \"typo\" , >>> \"proximity\" , >>> \"attribute\" , >>> \"sort\" , >>> \"exactness\" , >>> \"release_date:desc\" , >>> \"rank:desc\" , >>> ], >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_ranking_rules ( ranking_rules ) reset_ranking_rules ( self ) Reset ranking rules of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_ranking_rules () get_distinct_attribute ( self ) Get distinct attribute of the index. Returns: String containing the distinct attribute of the index. If no distinct attribute None is returned. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> distinct_attribute = await index . get_distinct_attribute () update_distinct_attribute ( self , body ) Update distinct attribute of the index. Args: body: Distinct attribute. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_distinct_attribute ( \"url\" ) reset_distinct_attribute ( self ) Reset distinct attribute of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_distinct_attributes () get_searchable_attributes ( self ) Get searchable attributes of the index. Returns: List containing the searchable attributes of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> searchable_attributes = await index . get_searchable_attributes () update_searchable_attributes ( self , body ) Update searchable attributes of the index. Args: body: List containing the searchable attributes. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_searchable_attributes ([ \"title\" , \"description\" , \"genre\" ]) reset_searchable_attributes ( self ) Reset searchable attributes of the index to default values. Args: body: List containing the searchable attributes. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_searchable_attributes () get_displayed_attributes ( self ) Get displayed attributes of the index. Returns: List containing the displayed attributes of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> displayed_attributes = await index . get_displayed_attributes () update_displayed_attributes ( self , body ) Update displayed attributes of the index. Args: body: List containing the displayed attributes. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_displayed_attributes ( >>> [ \"title\" , \"description\" , \"genre\" , \"release_date\" ] >>> ) reset_displayed_attributes ( self ) Reset displayed attributes of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_displayed_attributes () get_stop_words ( self ) Get stop words of the index. Returns: List containing the stop words of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> stop_words = await index . get_stop_words () update_stop_words ( self , body ) Update stop words of the index. Args: body: List containing the stop words of the index. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_stop_words ([ \"the\" , \"a\" , \"an\" ]) reset_stop_words ( self ) Reset stop words of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_stop_words () get_synonyms ( self ) Get synonyms of the index. Returns: The synonyms of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> synonyms = await index . get_synonyms () update_synonyms ( self , body ) Update synonyms of the index. Args: body: The synonyms of the index. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_synonyms ( >>> { \"wolverine\" : [ \"xmen\" , \"logan\" ], \"logan\" : [ \"wolverine\" ]} >>> ) reset_synonyms ( self ) Reset synonyms of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_synonyms () get_filterable_attributes ( self ) Get filterable attributes of the index. Returns: List containing the filterable attributes of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> filterable_attributes = await index . get_filterable_attributes () update_filterable_attributes ( self , body ) Update filterable attributes of the index. Args: body: List containing the filterable attributes of the index. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_filterable_attributes ([ \"genre\" , \"director\" ]) reset_filterable_attributes ( self ) Reset filterable attributes of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_filterable_attributes () get_sortable_attributes ( self ) Get sortable attributes of the Index. Returns: List containing the sortable attributes of the Index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> sortable_attributes = await index . get_sortable_attributes () update_sortable_attributes ( self , sortable_attributes ) Get sortable attributes of the Index. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_sortable_attributes ([ \"title\" , \"release_date\" ]) reset_sortable_attributes ( self ) Reset sortable attributes of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_sortable_attributes () get_typo_tolerance ( self ) Get typo tolerance for the index. Returns: TypoTolerance for the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> sortable_attributes = await index . get_typo_tolerance () update_typo_tolerance ( self , typo_tolerance ) Update typo tolerance. Returns: Task to track the action. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> TypoTolerance ( enabled = False ) >>> await index . update_typo_tolerance () reset_typo_tolerance ( self ) Reset typo tolerance to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_typo_tolerance () Tasks meilisearch_python_async.task. get_tasks ( http_client , index_id=None ) Get all tasks. Args: http_client: An AsyncClient instance. index_id: The id of the index for which to get the tasks. If provided this will get the tasks only for the specified index, if not all tasks will be returned. Default = None Returns: A list of all tasks. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. MeiliSearchTimeoutError: If the connection times out. Usage: >>> from meilisearch_async_client import Client >>> from meilisearch_async_client.task import get_tasks >>> >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> await get_tasks ( client . http_client ) meilisearch_python_async.task. get_task ( http_client , task_id ) Get a single task from it's task id. Args: http_client: An AsyncClient instance. task_id: Identifier of the task to retrieve. Returns: A list of all tasks. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. MeiliSearchTimeoutError: If the connection times out. Usage: >>> from meilisearch_async_client import Client >>> from meilisearch_async_client.task import get_task >>> >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> await get_task ( client . http_client , 1244 ) meilisearch_python_async.task. wait_for_task ( http_client , task_id , * , timeout_in_ms=5000 , interval_in_ms=50 ) Wait until MeiliSearch processes a task, and get its status. Args: http_client: An AsyncClient instance. task_id: Identifier of the task to retrieve. timeout_in_ms: Amount of time in milliseconds to wait before raising a MeiliSearchTimeoutError. Defaults to 5000. interval_in_ms: Time interval in miliseconds to sleep between requests. Defaults to 50. Returns: Details of the processed update status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. MeiliSearchTimeoutError: If the connection times out. Usage: >>> from meilisearch_async_client import Client >>> from meilisearch_async_client.task import wait_for_task >>> >>> documents = [ >>> { \"id\" : 1 , \"title\" : \"Movie 1\" , \"genre\" : \"comedy\" }, >>> { \"id\" : 2 , \"title\" : \"Movie 2\" , \"genre\" : \"drama\" }, >>> ] >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> response = await index . add_documents ( documents ) >>> await wait_for_pending_task ( client . http_client , response . update_id )","title":"API"},{"location":"api/#developer-api","text":"","title":"Developer API"},{"location":"api/#client","text":"","title":"Client"},{"location":"api/#create-a-client-with-a-context-manager","text":"This client runs in a context manager which ensures that everything is cleaned up after the use of the client is done. To create a client: from milisearch - python - async import Client async with Client ( \"http://localhost:7700\" , \"masterKey\" ) as client : index = client . index ( \"movies\" ) ...","title":"Create a client with a context manager"},{"location":"api/#create-a-client-without-a-context-manager","text":"It is also possible to call the client without using a context manager, but in doing so you will need to make sure to do the cleanup yourself: from meilisearch - python - async import Client try : client = Client ( \"http://localhost:7700\" , \"masterKey\" ) ... finally : await client . aclose () class meilisearch_python_async. Client ( url , api_key=None , * , timeout=None ) The client to connect to the MeiliSearchApi. init ( self , url , api_key=None , * , timeout=None ) Class initializer. Args: url: The url to the MeiliSearch API (ex: http://localhost:7700) api_key: The optional API key for MeiliSearch. Defaults to None. timeout: The amount of time in seconds that the client will wait for a response before timing out. Defaults to None. aclose ( self ) Closes the client. This only needs to be used if the client was not created with a context manager. create_dump ( self ) Trigger the creation of a MeiliSearch dump. Returns: The details of the task. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> await client . create_dump () create_index ( self , uid , primary_key=None ) Creates a new index. Args: uid: The index's unique identifier. primary_key: The primary key of the documents. Defaults to None. Returns: An instance of Index containing the information of the newly created index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = await client . create_index ( \"movies\" ) delete_index_if_exists ( self , uid ) Deletes an index if it already exists. Args: uid: The index's unique identifier. Returns: True if an index was deleted for False if not. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> await client . delete_index_if_exists () generate_tenant_token ( self , search_rules , * , api_key , expires_at=None ) Generates a JWT token to use for searching. Args: search_rules: Contains restrictions to use for the token. The default rules used for the API key used for signing can be used by setting searchRules to [\" \"]. If \"indexes\" is included it must be equal to or more restrictive than the key used to generate the token. api_key: The API key to use to generate the token. expires_at: The timepoint at which the token should expire. If value is provided it shoud be a UTC time in the future. Default = None. Returns: A JWT token Raises: InvalidRestriction: If the restrictions are less strict than the permissions allowed in the API key. KeyNotFoundError: If no API search key is found. >>> from datetime import datetime , timedelta >>> from meilisearch_async_client import Client >>> >>> expires_at = datetime . utcnow () + timedelta ( days = 7 ) >>> >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> token = client . generate_tenant_token ( >>> search_rules = [ \" \" ], api_key = api_key , expires_at = expires_at >>> ) get_indexes ( self ) Get all indexes. Returns: A list of all indexes. Raises: * MeilisearchCommunicationError: If there was an error communicating with the server. * MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> indexes = await client . get_indexes () get_index ( self , uid ) Gets a single index based on the uid of the index. Args: uid: The index's unique identifier. Returns: An Index instance containing the information of the fetched index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = await client . get_index () index ( self , uid ) Create a local reference to an index identified by UID, without making an HTTP call. Because no network call is made this method is not awaitable. Args: uid: The index's unique identifier. Returns: An Index instance. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) get_all_stats ( self ) Get stats for all indexes. Returns: Information about database size and all indexes. https://docs.meilisearch.com/reference/api/stats.html Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> stats = await client . get_all_stats () get_or_create_index ( self , uid , primary_key=None ) Get an index, or create it if it doesn't exist. Args: uid: The index's unique identifier. primary_key: The primary key of the documents. Defaults to None. Returns: An instance of Index containing the information of the retrieved or newly created index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error.MeiliSearchTimeoutError: If the connection times out. MeiliSearchTimeoutError: If the connection times out. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = await client . get_or_create_index ( \"movies\" ) create_key ( self , key ) Creates a new API key. Args: key: The information to use in creating the key. Note that if an expires_at value is included it should be in UTC time. Returns: The new API key. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> from meilissearch_async_client.models.client import KeyCreate >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> key_info = KeyCreate ( >>> description = \"My new key\" , >>> actions = [ \"search\" ], >>> indexes = [ \"movies\" ], >>> ) >>> keys = await client . create_key ( key_info ) get_keys ( self ) Gets the MeiliSearch API keys. Returns: API keys. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> keys = await client . get_keys () get_key ( self , key ) Gets information about a specific API key. Args: key: The key for which to retrieve the information. Returns: The API key, or None if the key is not found. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> keys = await client . get_key ( \"abc123\" ) update_key ( self , key ) Update an API key. Args: key: The information to use in updating the key. Note that if an expires_at value is included it should be in UTC time. Returns: The updated API key. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> from meilissearch_async_client.models.client import KeyUpdate >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> key_info = KeyUpdate ( key = \"abc123\" , >>> indexes = [ \"*\" ], >>> ) >>> keys = await client . update_key ( key_info ) get_raw_index ( self , uid ) Gets the index and returns all the index information rather than an Index instance. Args: uid: The index's unique identifier. Returns: Index information rather than an Index instance. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = await client . get_raw_index ( \"movies\" ) get_raw_indexes ( self ) Gets all the indexes. Returns all the index information rather than an Index instance. Returns: A list of the Index information rather than an Index instances. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = await client . get_raw_indexes () get_version ( self ) Get the MeiliSearch version. Returns: Information about the version of MeiliSearch. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> version = await client . get_version () health ( self ) Get health of the MeiliSearch server. Returns: The status of the MeiliSearch server. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> health = await client . get_healths ()","title":"Create a client without a context manager"},{"location":"api/#index","text":"class meilisearch_python_async.index. Index ( http_client , uid , primary_key=None , created_at=None , updated_at=None ) Index class gives access to all indexes routes and child routes. https://docs.meilisearch.com/reference/api/indexes.html init ( self , http_client , uid , primary_key=None , created_at=None , updated_at=None ) Class initializer. Args: http_client: An instance of the AsyncClient. This automatically gets passed by the Client when creating and Index instance. uid: The index's unique identifier. primary_key: The primary key of the documents. Defaults to None. created_at: The date and time the index was created. Defaults to None. updated_at: The date and time the index was last updated. Defaults to None. delete ( self ) Deletes the index. Returns: The details of the task. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. ** Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . delete () delete_if_exists ( self ) Delete the index if it already exists. Returns: True if the index was deleted or False if not. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . delete_if_exists () update ( self , primary_key ) Update the index primary key. Args: primary_key: The primary key of the documents. Returns: An instance of the Index with the updated information. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> updated_index = await index . update () fetch_info ( self ) Gets the infromation about the index. Returns: An instance of the Index containing the retrieved information. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> index_info = await index . fetch_info () get_primary_key ( self ) Get the primary key. Returns: The primary key for the documents in the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> primary_key = await index . get_primary_key () create ( http_client , uid , primary_key=None ) Creates a new index. In general this method should not be used directly and instead the index should be created through the Client . Args: http_client: An instance of the AsyncClient. This automatically gets passed by the Client when creating and Index instance. uid: The index's unique identifier. primary_key: The primary key of the documents. Defaults to None. Returns: An instance of Index containing the information of the newly created index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = await index . create ( client , \"movies\" ) get_stats ( self ) Get stats of the index. Returns: Stats of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> stats = await index . get_stats () search ( self , query=None , * , offset=0 , limit=20 , filter=None , facets=None , attributes_to_retrieve=['*'] , attributes_to_crop=None , crop_length=200 , attributes_to_highlight=None , sort=None , show_matches_position=False , highlight_pre_tag=' ' , highlight_post_tag=' ' , crop_marker='...' ) Search the index. Args: query: String containing the word(s) to search offset: Number of documents to skip. Defaults to 0. limit: Maximum number of documents returned. Defaults to 20. filter: Filter queries by an attribute value. Defaults to None. facets: Facets for which to retrieve the matching count. Defaults to None. attributes_to_retrieve: Attributes to display in the returned documents. Defaults to [\"*\"]. attributes_to_crop: Attributes whose values have to be cropped. Defaults to None. crop_length: The maximun number of words to display. Defaults to 200. attributes_to_highlight: Attributes whose values will contain highlighted matching terms. Defaults to None. sort: Attributes by which to sort the results. Defaults to None. show_matches_postions: Defines whether an object that contains information about the matches should be returned or not. Defaults to False. hightlight_pre_tag: The opening tag for highlighting text. Defaults to . hightlight_post_tag: The closing tag for highlighting text. Defaults to crop_marker: Marker to display when the number of words excedes the crop_length . Defaults to ... Returns: Results of the search Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> search_results = await index . search ( \"Tron\" ) get_document ( self , document_id ) Get one document with given document identifier. Args: document_id: Unique identifier of the document. Returns: The document information Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> document = await index . get_document ( \"1234\" ) get_documents ( self , * , offset=0 , limit=20 , fields=None ) Get a batch documents from the index. Args: offset: Number of documents to skip. Defaults to 0. limit: Maximum number of documents returnedd. Defaults to 20. fields: Document attributes to show. If this value is None then all attributes are retrieved. Defaults to None. Returns: Documents info. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> documents = await index . get_documents () add_documents ( self , documents , primary_key=None ) Add documents to the index. Args: documents: List of documents. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: The details of the task. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> >>> documents = [ >>> { \"id\" : 1 , \"title\" : \"Movie 1\" , \"genre\" : \"comedy\" }, >>> { \"id\" : 2 , \"title\" : \"Movie 2\" , \"genre\" : \"drama\" }, >>> ] >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . add_documents ( documents ) add_documents_in_batches ( self , documents , * , batch_size=1000 , primary_key=None ) Adds documents in batches to reduce RAM usage with indexing. Args: documents: List of documents. batch_size: The number of documents that should be included in each batch. Defaults to 1000. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: List of update ids to track the action. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> >>> documents = [ >>> { \"id\" : 1 , \"title\" : \"Movie 1\" , \"genre\" : \"comedy\" }, >>> { \"id\" : 2 , \"title\" : \"Movie 2\" , \"genre\" : \"drama\" }, >>> ] >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . add_documents_in_batches ( documents ) add_documents_from_directory ( self , directory_path , * , primary_key=None , document_type='json' , combine_documents=True ) Load all json files from a directory and add the documents to the index. Args: directory_path: Path to the directory that contains the json files. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. document_type: The type of document being added. Accepted types are json, csv, and ndjson. For csv files the first row of the document should be a header row contining the field names, and ever for should have a title. combine_documents: If set to True this will combine the documents from all the files before indexing them. Defaults to True. Returns: The details of the task status. Raises: InvalidDocumentError: If the docucment is not a valid format for MeiliSarch. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> directory_path = Path ( \"/path/to/directory/containing/files\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . add_documents_from_directory ( directory_path ) add_documents_from_directory_in_batches ( self , directory_path , * , batch_size=1000 , primary_key=None , document_type='json' , combine_documents=True ) Load all json files from a directory and add the documents to the index in batches. Args: directory_path: Path to the directory that contains the json files. batch_size: The number of documents that should be included in each batch. Defaults to 1000. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. document_type: The type of document being added. Accepted types are json, csv, and ndjson. For csv files the first row of the document should be a header row contining the field names, and ever for should have a title. combine_documents: If set to True this will combine the documents from all the files before indexing them. Defaults to True. Returns: List of update ids to track the action. Raises: InvalidDocumentError: If the docucment is not a valid format for MeiliSarch. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> directory_path = Path ( \"/path/to/directory/containing/files\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . add_documents_from_directory_in_batches ( directory_path ) add_documents_from_file ( self , file_path , primary_key=None ) Add documents to the index from a json file. Args: file_path: Path to the json file. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: The details of the task status. Raises: InvalidDocumentError: If the docucment is not a valid format for MeiliSarch. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> file_path = Path ( \"/path/to/file.json\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . add_documents_from_file ( file_path ) add_documents_from_file_in_batches ( self , file_path , * , batch_size=1000 , primary_key=None ) Adds documents form a json file in batches to reduce RAM usage with indexing. Args: file_path: Path to the json file. batch_size: The number of documents that should be included in each batch. Defaults to 1000. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: List of update ids to track the action. Raises: InvalidDocumentError: If the docucment is not a valid format for MeiliSarch. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> file_path = Path ( \"/path/to/file.json\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . add_documents_from_file_in_batches ( file_path ) add_documents_from_raw_file ( self , file_path , primary_key=None ) Directly send csv or ndjson files to MeiliSearch without pre-processing. The can reduce RAM usage from MeiliSearch during indexing, but does not include the option for batching. Args: file_path: The path to the file to send to MeiliSearch. Only csv and ndjson files are allowed. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: The details of the task. Raises: ValueError: If the file is not a csv or ndjson file. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> file_path = Path ( \"/path/to/file.csv\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . add_documents_from_raw_file ( file_path ) update_documents ( self , documents , primary_key=None ) Update documents in the index. Args: documents: List of documents. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: The details of the task. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> documents = [ >>> { \"id\" : 1 , \"title\" : \"Movie 1\" , \"genre\" : \"comedy\" }, >>> { \"id\" : 2 , \"title\" : \"Movie 2\" , \"genre\" : \"drama\" }, >>> ] >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_documents ( documents ) update_documents_in_batches ( self , documents , * , batch_size=1000 , primary_key=None ) Update documents in batches to reduce RAM usage with indexing. Each batch tries to fill the max_payload_size Args: documents: List of documents. batch_size: The number of documents that should be included in each batch. Defaults to 1000. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: List of update ids to track the action. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> documents = [ >>> { \"id\" : 1 , \"title\" : \"Movie 1\" , \"genre\" : \"comedy\" }, >>> { \"id\" : 2 , \"title\" : \"Movie 2\" , \"genre\" : \"drama\" }, >>> ] >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_documents_in_batches ( documents ) update_documents_from_directory ( self , directory_path , * , primary_key=None , document_type='json' , combine_documents=True ) Load all json files from a directory and update the documents. Args: directory_path: Path to the directory that contains the json files. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. document_type: The type of document being added. Accepted types are json, csv, and ndjson. For csv files the first row of the document should be a header row contining the field names, and ever for should have a title. combine_documents: If set to True this will combine the documents from all the files before indexing them. Defaults to True. Returns: The details of the task status. Raises: InvalidDocumentError: If the docucment is not a valid format for MeiliSarch. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> directory_path = Path ( \"/path/to/directory/containing/files\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_documents_from_directory ( directory_path ) update_documents_from_directory_in_batches ( self , directory_path , * , batch_size=1000 , primary_key=None , document_type='json' , combine_documents=True ) Load all json files from a directory and update the documents. Args: directory_path: Path to the directory that contains the json files. batch_size: The number of documents that should be included in each batch. Defaults to 1000. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. document_type: The type of document being added. Accepted types are json, csv, and ndjson. For csv files the first row of the document should be a header row contining the field names, and ever for should have a title. combine_documents: If set to True this will combine the documents from all the files before indexing them. Defaults to True. Returns: List of update ids to track the action. Raises: InvalidDocumentError: If the docucment is not a valid format for MeiliSarch. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> directory_path = Path ( \"/path/to/directory/containing/files\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_documents_from_directory_in_batches ( directory_path ) update_documents_from_file ( self , file_path , primary_key=None ) Add documents in the index from a json file. Args: file_path: Path to the json file. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> file_path = Path ( \"/path/to/file.json\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_documents_from_file ( file_path ) update_documents_from_file_in_batches ( self , file_path , * , batch_size=1000 , primary_key=None ) Updates documents form a json file in batches to reduce RAM usage with indexing. Args: file_path: Path to the json file. batch_size: The number of documents that should be included in each batch. Defaults to 1000. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: List of update ids to track the action. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> file_path = Path ( \"/path/to/file.json\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_documents_from_file_in_batches ( file_path ) update_documents_from_raw_file ( self , file_path , primary_key=None ) Directly send csv or ndjson files to MeiliSearch without pre-processing. The can reduce RAM usage from MeiliSearch during indexing, but does not include the option for batching. Args: file_path: The path to the file to send to MeiliSearch. Only csv and ndjson files are allowed. primary_key: The primary key of the documents. This will be ignored if already set. Defaults to None. Returns: The details of the task status. Raises: ValueError: If the file is not a csv or ndjson file. MeiliSearchError: If the file path is not valid MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from pathlib import Path >>> from meilisearch_async_client import Client >>> file_path = Path ( \"/path/to/file.csv\" ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_documents_from_raw_file ( file_path ) delete_document ( self , document_id ) Delete one document from the index. Args: document_id: Unique identifier of the document. Returns: The details of the task status. Rases: MeiliSearchCommunicationError: If there was an error communicating with the server. MeiliSearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . delete_document ( \"1234\" ) delete_documents ( self , ids ) Delete multiple documents from the index. Args: ids: List of unique identifiers of documents. Returns: List of update ids to track the action. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . delete_documents ([ \"1234\" , \"5678\" ]) delete_all_documents ( self ) Delete all documents from the index. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . delete_all_document () get_settings ( self ) Get settings of the index. Returns: Settings of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> settings = await index . get_settings () update_settings ( self , body ) Update settings of the index. Args: body: Settings of the index. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> from meilisearch_async_client import MeiliSearchSettings >>> new_settings = MeiliSearchSettings ( >>> synonyms = { \"wolverine\" : [ \"xmen\" , \"logan\" ], \"logan\" : [ \"wolverine\" ]}, >>> stop_words = [ \"the\" , \"a\" , \"an\" ], >>> ranking_rules = [ >>> \"words\" , >>> \"typo\" , >>> \"proximity\" , >>> \"attribute\" , >>> \"sort\" , >>> \"exactness\" , >>> \"release_date:desc\" , >>> \"rank:desc\" , >>> ], >>> filterable_attributes = [ \"genre\" , \"director\" ], >>> distinct_attribute = \"url\" , >>> searchable_attributes = [ \"title\" , \"description\" , \"genre\" ], >>> displayed_attributes = [ \"title\" , \"description\" , \"genre\" , \"release_date\" ], >>> sortable_attributes = [ \"title\" , \"release_date\" ], >>> ) >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_settings ( new_settings ) reset_settings ( self ) Reset settings of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_settings () get_ranking_rules ( self ) Get ranking rules of the index. Returns: List containing the ranking rules of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> ranking_rules = await index . get_ranking_rules () update_ranking_rules ( self , ranking_rules ) Update ranking rules of the index. Args: ranking_rules: List containing the ranking rules. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> ranking_rules = [ >>> \"words\" , >>> \"typo\" , >>> \"proximity\" , >>> \"attribute\" , >>> \"sort\" , >>> \"exactness\" , >>> \"release_date:desc\" , >>> \"rank:desc\" , >>> ], >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_ranking_rules ( ranking_rules ) reset_ranking_rules ( self ) Reset ranking rules of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_ranking_rules () get_distinct_attribute ( self ) Get distinct attribute of the index. Returns: String containing the distinct attribute of the index. If no distinct attribute None is returned. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> distinct_attribute = await index . get_distinct_attribute () update_distinct_attribute ( self , body ) Update distinct attribute of the index. Args: body: Distinct attribute. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_distinct_attribute ( \"url\" ) reset_distinct_attribute ( self ) Reset distinct attribute of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_distinct_attributes () get_searchable_attributes ( self ) Get searchable attributes of the index. Returns: List containing the searchable attributes of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> searchable_attributes = await index . get_searchable_attributes () update_searchable_attributes ( self , body ) Update searchable attributes of the index. Args: body: List containing the searchable attributes. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_searchable_attributes ([ \"title\" , \"description\" , \"genre\" ]) reset_searchable_attributes ( self ) Reset searchable attributes of the index to default values. Args: body: List containing the searchable attributes. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_searchable_attributes () get_displayed_attributes ( self ) Get displayed attributes of the index. Returns: List containing the displayed attributes of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> displayed_attributes = await index . get_displayed_attributes () update_displayed_attributes ( self , body ) Update displayed attributes of the index. Args: body: List containing the displayed attributes. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_displayed_attributes ( >>> [ \"title\" , \"description\" , \"genre\" , \"release_date\" ] >>> ) reset_displayed_attributes ( self ) Reset displayed attributes of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_displayed_attributes () get_stop_words ( self ) Get stop words of the index. Returns: List containing the stop words of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> stop_words = await index . get_stop_words () update_stop_words ( self , body ) Update stop words of the index. Args: body: List containing the stop words of the index. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_stop_words ([ \"the\" , \"a\" , \"an\" ]) reset_stop_words ( self ) Reset stop words of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_stop_words () get_synonyms ( self ) Get synonyms of the index. Returns: The synonyms of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> synonyms = await index . get_synonyms () update_synonyms ( self , body ) Update synonyms of the index. Args: body: The synonyms of the index. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_synonyms ( >>> { \"wolverine\" : [ \"xmen\" , \"logan\" ], \"logan\" : [ \"wolverine\" ]} >>> ) reset_synonyms ( self ) Reset synonyms of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_synonyms () get_filterable_attributes ( self ) Get filterable attributes of the index. Returns: List containing the filterable attributes of the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> filterable_attributes = await index . get_filterable_attributes () update_filterable_attributes ( self , body ) Update filterable attributes of the index. Args: body: List containing the filterable attributes of the index. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_filterable_attributes ([ \"genre\" , \"director\" ]) reset_filterable_attributes ( self ) Reset filterable attributes of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_filterable_attributes () get_sortable_attributes ( self ) Get sortable attributes of the Index. Returns: List containing the sortable attributes of the Index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> sortable_attributes = await index . get_sortable_attributes () update_sortable_attributes ( self , sortable_attributes ) Get sortable attributes of the Index. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . update_sortable_attributes ([ \"title\" , \"release_date\" ]) reset_sortable_attributes ( self ) Reset sortable attributes of the index to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_sortable_attributes () get_typo_tolerance ( self ) Get typo tolerance for the index. Returns: TypoTolerance for the index. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> sortable_attributes = await index . get_typo_tolerance () update_typo_tolerance ( self , typo_tolerance ) Update typo tolerance. Returns: Task to track the action. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> TypoTolerance ( enabled = False ) >>> await index . update_typo_tolerance () reset_typo_tolerance ( self ) Reset typo tolerance to default values. Returns: The details of the task status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. Usage: >>> from meilisearch_async_client import Client >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> await index . reset_typo_tolerance ()","title":"Index"},{"location":"api/#tasks","text":"meilisearch_python_async.task. get_tasks ( http_client , index_id=None ) Get all tasks. Args: http_client: An AsyncClient instance. index_id: The id of the index for which to get the tasks. If provided this will get the tasks only for the specified index, if not all tasks will be returned. Default = None Returns: A list of all tasks. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. MeiliSearchTimeoutError: If the connection times out. Usage: >>> from meilisearch_async_client import Client >>> from meilisearch_async_client.task import get_tasks >>> >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> await get_tasks ( client . http_client ) meilisearch_python_async.task. get_task ( http_client , task_id ) Get a single task from it's task id. Args: http_client: An AsyncClient instance. task_id: Identifier of the task to retrieve. Returns: A list of all tasks. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. MeiliSearchTimeoutError: If the connection times out. Usage: >>> from meilisearch_async_client import Client >>> from meilisearch_async_client.task import get_task >>> >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> await get_task ( client . http_client , 1244 ) meilisearch_python_async.task. wait_for_task ( http_client , task_id , * , timeout_in_ms=5000 , interval_in_ms=50 ) Wait until MeiliSearch processes a task, and get its status. Args: http_client: An AsyncClient instance. task_id: Identifier of the task to retrieve. timeout_in_ms: Amount of time in milliseconds to wait before raising a MeiliSearchTimeoutError. Defaults to 5000. interval_in_ms: Time interval in miliseconds to sleep between requests. Defaults to 50. Returns: Details of the processed update status. Raises: MeilisearchCommunicationError: If there was an error communicating with the server. MeilisearchApiError: If the MeiliSearch API returned an error. MeiliSearchTimeoutError: If the connection times out. Usage: >>> from meilisearch_async_client import Client >>> from meilisearch_async_client.task import wait_for_task >>> >>> documents = [ >>> { \"id\" : 1 , \"title\" : \"Movie 1\" , \"genre\" : \"comedy\" }, >>> { \"id\" : 2 , \"title\" : \"Movie 2\" , \"genre\" : \"drama\" }, >>> ] >>> async with Client ( \"http://localhost.com\" , \"masterKey\" ) as client : >>> index = client . index ( \"movies\" ) >>> response = await index . add_documents ( documents ) >>> await wait_for_pending_task ( client . http_client , response . update_id )","title":"Tasks"},{"location":"pydantic/","text":"Pydantic usage This package uses Pydantic to serialize/deserialize the JSON from MeiliSearch into Python objects wherever possible, and in the process converts the camelCaseNames from JSON into more Pythonic snake_case_names. In some instances it is not possible to return the data as an object because the structure will be dependant on your particular dataset and can't be known ahead of time. In these instances you can either work with the data in the dictionary that is returned, or because you will know the structure you can generate your own Pydantic models. As an example, if you want to get a movie from the small movies example you could put the results into an object with the following: from datetime import datetime from typing import Optional from camel_converter.pydantic_base import CamelBase from meilisearch_python_async import Client # Inheriting from CamelBase will allow your class to automatically convert # variables returned from the server in camelCase into snake_case. It will # also make it a Pydantic Model. class Movie ( CamelBase ): id : int title : str poster : str overview : str release_date : datetime genre : Optional [ str ] = None async with Client ( \"http://127.0.0.1:7700\" , \"masterKey\" ) as client : index = client . index ( \"movies\" ) movie_dict = await index . get_document ( 287947 ) movie = Movie ( ** movie_dict ) And then the movie variable would contain the movie object with the following information Movie ( id = 287947 , title = \"Shazam!\" , poster = \"https://image.tmdb.org/t/p/w1280/xnopI5Xtky18MPhK40cZAGAOVeV.jpg\" , overview = \"A boy is given the ability to become an adult superhero in times of need with a single magic word.\" , release_date = datetime . datetime ( 2019 , 3 , 23 , 0 , 0 , tzinfo = datetime . timezone . utc ), genre = \"action\" , ) By inheriting from CamelBase, or any of the other provided models you will be inheriting Pydantic models and therefore have access to the funcitonality Pydantic provides such as validators and Fields . Pydantic will also automatically deserialized the data into the correct data type based on the type hint provided.","title":"Pydantic"},{"location":"pydantic/#pydantic-usage","text":"This package uses Pydantic to serialize/deserialize the JSON from MeiliSearch into Python objects wherever possible, and in the process converts the camelCaseNames from JSON into more Pythonic snake_case_names. In some instances it is not possible to return the data as an object because the structure will be dependant on your particular dataset and can't be known ahead of time. In these instances you can either work with the data in the dictionary that is returned, or because you will know the structure you can generate your own Pydantic models. As an example, if you want to get a movie from the small movies example you could put the results into an object with the following: from datetime import datetime from typing import Optional from camel_converter.pydantic_base import CamelBase from meilisearch_python_async import Client # Inheriting from CamelBase will allow your class to automatically convert # variables returned from the server in camelCase into snake_case. It will # also make it a Pydantic Model. class Movie ( CamelBase ): id : int title : str poster : str overview : str release_date : datetime genre : Optional [ str ] = None async with Client ( \"http://127.0.0.1:7700\" , \"masterKey\" ) as client : index = client . index ( \"movies\" ) movie_dict = await index . get_document ( 287947 ) movie = Movie ( ** movie_dict ) And then the movie variable would contain the movie object with the following information Movie ( id = 287947 , title = \"Shazam!\" , poster = \"https://image.tmdb.org/t/p/w1280/xnopI5Xtky18MPhK40cZAGAOVeV.jpg\" , overview = \"A boy is given the ability to become an adult superhero in times of need with a single magic word.\" , release_date = datetime . datetime ( 2019 , 3 , 23 , 0 , 0 , tzinfo = datetime . timezone . utc ), genre = \"action\" , ) By inheriting from CamelBase, or any of the other provided models you will be inheriting Pydantic models and therefore have access to the funcitonality Pydantic provides such as validators and Fields . Pydantic will also automatically deserialized the data into the correct data type based on the type hint provided.","title":"Pydantic usage"}]}